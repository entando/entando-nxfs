/*
 * NxFs
 *
 * Simple file access APIs for the Entando Nx subsystem
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nxsiteman

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"path"
	"path/filepath"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// ApiNxfsBrowseEncodedPathGet - Gets the list of objects in a directory
func (s *DefaultApiService) ApiNxfsBrowseEncodedPathGet(ctx context.Context, encodedPath string, maxdepth int32) (ImplResponse, error) {

	pathToBrowse, fileInfoToBrowse, errorReponse := composeFullPathOrErrorResponse(encodedPath)
	if errorReponse != nil {
		return *errorReponse, nil
	}

	// recursive function
	dirObjectArray, err := browseFileTree(pathToBrowse, fileInfoToBrowse, 0, maxdepth, []DirectoryObject{})
	if err != nil {
		return *ErrorResponse(http.StatusInternalServerError, "dir_listing_err", err.Error()), nil
	}

	return Response(http.StatusOK, FlatDirectoryTree{dirObjectArray}), nil
}

// ApiNxfsObjectsEncodedPathDelete - Deletes an object
func (s *DefaultApiService) ApiNxfsObjectsEncodedPathDelete(ctx context.Context, encodedPath string) (ImplResponse, error) {

	pathToDelete, fileToDelete, errorReponse := composeFullPathOrErrorResponse(encodedPath)
	if errorReponse != nil {
		if errorReponse.Code == http.StatusNotFound {
			return Response(http.StatusNoContent, nil), nil
		} else {
			return *errorReponse, nil
		}
	}
	absPathFile := path.Join(pathToDelete, fileToDelete.Name())

	if isDirWithChildren(absPathFile, fileToDelete) {
		return *ErrorResponse(http.StatusUnprocessableEntity, "dir_not_empty", "The folder to delete is not empty"), nil
	}

	if errorReponse = deleteFile(absPathFile); errorReponse != nil {
		return *errorReponse, nil
	}

	return Response(http.StatusNoContent, nil), nil
}

// ApiNxfsObjectsEncodedPathGet - Gets an object
func (s *DefaultApiService) ApiNxfsObjectsEncodedPathGet(ctx context.Context, encodedPath string) (ImplResponse, error) {

	pathToBrowse, requestedFile, errorReponse := composeFullPathOrErrorResponse(encodedPath)
	if errorReponse != nil {
		return *errorReponse, nil
	}

	// if dir return error
	if requestedFile.IsDir() {
		return *ErrorResponse(http.StatusBadRequest, "dir_requested", "The received encoded path "+
			"corresponds to a directory. This endpoint returns files content, to browse a directory please use the browse one"), nil
	}

	// return file content
	fileContent, err := ioutil.ReadFile(path.Join(pathToBrowse, requestedFile.Name()))
	if err != nil {
		return *ErrorResponse(http.StatusBadRequest, "err_reading_content",
			fmt.Sprintf("An error occurred during the reading of the file content: %q", err.Error())), nil
	}

	// Convert []byte to string and print to screen
	fileContentString := string(fileContent)

	return Response(http.StatusOK, toFileObject(pathToBrowse, requestedFile, fileContentString)), nil
}

// ApiNxfsObjectsEncodedPathPublishPost - Publishes an object
func (s *DefaultApiService) ApiNxfsObjectsEncodedPathPublishPost(ctx context.Context, encodedPath string) (ImplResponse, error) {
	// TODO - update ApiNxfsObjectsEncodedPathPublishPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, DirectoryObject{}) or use other options such as http.Ok ...
	//return Response(200, DirectoryObject{}), nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(200, "MOCKED RESPONSE"), nil
}

// ApiNxfsObjectsEncodedPathPut - Creates or updates an object
func (s *DefaultApiService) ApiNxfsObjectsEncodedPathPut(ctx context.Context, encodedPath string, fileObject FileObject) (ImplResponse, error) {

	// dir can't have content
	if fileObject.Type == D && "" != fileObject.Content {
		return *ErrorResponse(http.StatusBadRequest, "full_content_for_dir", "A creation dir request can't contain a file content value"), nil
	} else if fileObject.Type == F && "" == fileObject.Content {
		// file must have content
		return *ErrorResponse(http.StatusBadRequest, "empty_content", "A file with empty content can't be saved"), nil
	}

	decodedPath, errResponse := decodePath(encodedPath)
	if errResponse != nil {
		return *errResponse, nil
	}

	fullPathToSave := filepath.Join(GetBrowsableFsRootPath(), decodedPath)

	var errResp *ImplResponse
	if fileObject.Type == D {
		errResp = createDirectory(fullPathToSave)
	} else {
		errResp = createFile(fullPathToSave, fileObject)
	}

	if errResp != nil {
		return *errResp, nil
	} else {
		return Response(http.StatusCreated, toDirectoryObjectFromFilePath(fullPathToSave)), nil
	}
}
